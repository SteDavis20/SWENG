// @ author: Stephen Davis
import static org.junit.Assert.*;

import org.junit.Test;
import java.util.ArrayList;

public class BinaryTreeTest {

	public static void main(String[] args) {
		BinaryTree treeLeaningLeft = new BinaryTree();
		tree.root = new Node(6);
		tree.root.leftChild = new Node(4);
		tree.root.rightChild = new Node(10);
		tree.root.leftChild.leftChild = new Node(3);
		tree.root.leftChild.rightChild = new Node(5);
		tree.root.leftChild.leftChild.leftChild = new Node(1);
		
		BinaryTree treeLeaningRight = new BinaryTree();
		tree.root = new Node(6);
		tree.root.leftChild = new Node(4);
		tree.root.rightChild = new Node(10);
		tree.root.leftChild.leftChild = new Node(3);
		tree.root.leftChild.rightChild = new Node(5);
		tree.root.leftChild.leftChild.leftChild = new Node(1);
		
		BinaryTree balancedTree = new BinaryTree();
		tree.root = new Node(6);
		tree.root.leftChild = new Node(4);
		tree.root.rightChild = new Node(10);
		tree.root.leftChild.leftChild = new Node(3);
		tree.root.leftChild.rightChild = new Node(5);
		tree.root.leftChild.leftChild.leftChild = new Node(1);
	}
	
	@Test
	public void testCheckIsNode(BinaryTree tree) {
		Node n = new Node(5);
		Node n2 = new Node(16);
		assertEquals(true, tree.checkIsNode(tree.root, n));
		assertEquals(false, tree.checkIsNode(tree.root, n2));
	}
	
	@Test
	public void testEmptyTree() {
		BinaryTree bt = new BinaryTree();
		assertEquals(null, bt.findLCA(3, 4));
	}
	
	@Test
	public void testfindLCASomeParent() {
		Node root = new Node(1);
		Node v = new Node(5);
		Node w = new Node(8);
		assertEquals(root, BinaryTree.findLCA(v, w));
	}
//	
//	@Test
//	public void testfindLCAVIsAncestor() {
//		Node root = new Node(1);
//		Node v = new Node(4);
//		Node w = new Node(8);
//		assertEquals(v, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAWIsAncestor() {
//		Node root = new Node(1);
//		Node v = new Node(8);
//		Node w = new Node(4);
//		assertEquals(w, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAVAndWEqual() {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(5);
//		assertEquals(v, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAVNotAValidNode() {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(null, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAWNotAValidNode() {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(null, BinaryTree.findLCA(root, v, w));
//	}
//	
}
