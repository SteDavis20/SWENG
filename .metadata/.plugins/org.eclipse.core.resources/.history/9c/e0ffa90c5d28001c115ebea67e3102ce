// @ author: Stephen Davis
import static org.junit.Assert.*;

import org.junit.Test;
import java.util.ArrayList;

public class LowestCommonAncestor1Test {

	public static void main(String[] args) {
		
		// populating various different kinds of trees
		BinaryTree emptyTree = new BinaryTree();
		
		BinaryTree treeLeaningLeft = new BinaryTree();
		treeLeaningLeft.root = new Node(6);
		treeLeaningLeft.root.leftChild = new Node(4);
		treeLeaningLeft.root.leftChild.leftChild = new Node(10);
		treeLeaningLeft.root.leftChild.leftChild.leftChild = new Node(3);
		treeLeaningLeft.root.leftChild.leftChild.leftChild.leftChild = new Node(5);
		
		BinaryTree treeLeaningRight = new BinaryTree();
		treeLeaningRight.root = new Node(6);
		treeLeaningRight.root.rightChild = new Node(4);
		treeLeaningRight.root.rightChild.rightChild = new Node(10);
		treeLeaningRight.root.rightChild.rightChild.rightChild = new Node(3);
		treeLeaningRight.root.rightChild.rightChild.rightChild.rightChild = new Node(5);
		
		BinaryTree balancedTree = new BinaryTree();
		balancedTree.root = new Node(6);
		balancedTree.root.leftChild = new Node(4);
		balancedTree.root.rightChild = new Node(10);
		balancedTree.root.leftChild.leftChild = new Node(3);
		balancedTree.root.leftChild.rightChild = new Node(5);
		balancedTree.root.rightChild.leftChild = new Node(12);
		balancedTree.root.rightChild.rightChild = new Node(11);
		balancedTree.root.leftChild.rightChild.rightChild = new Node(2);
		balancedTree.root.leftChild.rightChild.leftChild = new Node(7);
		balancedTree.root.leftChild.leftChild.leftChild = new Node(1);
		balancedTree.root.leftChild.leftChild.rightChild = new Node(9);
		
		
		
		BinaryTree shortTree = new BinaryTree();
		shortTree.root = new Node(6);
		shortTree.root.leftChild = new Node(4);
		shortTree.root.rightChild = new Node(10);
		
	}
	
	@Test
	public void testCheckIsNode(BinaryTree tree) {
		Node n = new Node(5);
		Node n2 = new Node(16);
		assertEquals(true, tree.checkIsNode(tree.root, n));
		assertEquals(false, tree.checkIsNode(tree.root, n2));
	}
	
	@Test
	public void testEmptyTree(BinaryTree tree) {
		assertEquals(null, tree.findLCA(3, 4));
	}
	
	@Test
	public void testfindLCASomeParent(BinaryTree tree) {
		Node root = new Node(1);
		Node v = new Node(5);
		Node w = new Node(8);
		assertEquals(root, BinaryTree.findLCA(v, w));
	}
//	
//	@Test
//	public void testfindLCAVIsAncestor(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(4);
//		Node w = new Node(8);
//		assertEquals(v, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAWIsAncestor(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(8);
//		Node w = new Node(4);
//		assertEquals(w, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAVAndWEqual(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(5);
//		assertEquals(v, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAVNotAValidNode(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(null, BinaryTree.findLCA(root, v, w));
//	}
//	
//	@Test
//	public void testfindLCAWNotAValidNode(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(null, BinaryTree.findLCA(root, v, w));
//	}
//	
}
