
/*
	@author Robert Sedgewick
	@author Kevin Wayne
	 */

import java.util.NoSuchElementException;

public class Digraph {


//	private static final String NEWLINE = System.getProperty("line.separator");

	private final int V;                // number of vertices in this digraph
	private int E;                      // number of edges in this digraph
	private Bag<Integer>[] adj;    // adj[v] = adjacency list for vertex v

	/**
	 * Initializes an empty edge-weighted digraph with V vertices and 0 edges.
	 *
	 * @param  V the number of vertices
	 */
	public Digraph(int V) {
		this.V = V;
		this.E = 0;
		adj = (Bag<Integer>[]) new Bag[V];
		for (int v = 0; v < V; v++)
			adj[v] = new Bag<Integer>();
	}

	/**
	 * Returns the number of vertices in this edge-weighted digraph.
	 *
	 * @return the number of vertices in this edge-weighted digraph
	 */
	public int V() {
		return V;
	}

	/**
	 * Adds the directed edge e to this edge-weighted digraph.
	 *
	 * @param  e the edge
	 * @throws IllegalArgumentException unless endpoints of edge are between {@code 0}
	 *         and {@code V-1}
	 */
	public void addEdge(DirectedEdge e) {
		int v = e.from();
		adj[v].add(e);
		E++;
	}

	/**
	 * Returns the directed edges incident from vertex {@code v}.
	 *
	 * @param  v the vertex
	 * @return the directed edges incident from vertex {@code v} as an Iterable
	 * @throws IllegalArgumentException unless {@code 0 <= v < V}
	 */
	public Iterable<DirectedEdge> adj(int v) {
		return adj[v];
	}

}
