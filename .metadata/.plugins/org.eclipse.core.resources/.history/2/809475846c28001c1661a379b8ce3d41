// @ author: Stephen Davis
import static org.junit.Assert.*;

import org.junit.Test;
import java.util.ArrayList;

public class LowestCommonAncestor1Test {

	public static void main(String[] args) {
		
		// populating various different kinds of trees
		BinaryTree emptyTree = new BinaryTree();
		
		BinaryTree treeLeaningLeft = new BinaryTree();
		treeLeaningLeft.populateLeftLeaningTree(treeLeaningLeft);
		
		BinaryTree treeLeaningRight = new BinaryTree();
		treeLeaningRight.populateRightLeaningTree(treeLeaningRight);

		
		BinaryTree balancedAndLongTree = new BinaryTree();
		balancedAndLongTree.populateBalancedAndLongTree(balancedAndLongTree);
		
		BinaryTree shortTree = new BinaryTree();
		shortTree.populateShortTree(shortTree);
	}
	
	@Test
	public void testCheckIsNode() {
		BinaryTree treeLeaningLeft = new BinaryTree();
		treeLeaningLeft.populateLeftLeaningTree(treeLeaningLeft);
		Node n = new Node(5);
		Node n2 = new Node(16);
		assertEquals(true, treeLeaningLeft.checkIsNode(treeLeaningLeft.root, n));
		assertEquals(false, treeLeaningLeft.checkIsNode(treeLeaningLeft.root, n2));
		
		BinaryTree balancedAndLongTree = new BinaryTree();
		balancedAndLongTree.populateBalancedAndLongTree(balancedAndLongTree);
		assertEquals(true, balancedAndLongTree.checkIsNode(balancedAndLongTree.root, n));
		assertEquals(false, balancedAndLongTree.checkIsNode(balancedAndLongTree.root, n2));
	}
	
	@Test
	public void testEmptyTree() {
		BinaryTree emptyTree = new BinaryTree();
		assertEquals(null, emptyTree.findLCA(3, 4));
	}
	
	// TO-DO
//	@Test
//	public void testfindLCASomeParent(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(root, BinaryTree.findLCA(v, w));
//	}
////	
	
	@Test
	public void testfindLCAVIsAncestor() {
		BinaryTree treeLeaningRight = new BinaryTree();
		treeLeaningRight.populateRightLeaningTree(treeLeaningRight);
		Node v = treeLeaningRight.root;
		Node w = null;
		if(treeLeaningRight.root.leftChild!=null) {
			w = treeLeaningRight.root.leftChild;
		}
		else if(treeLeaningRight.root.rightChild!=null) {
			w = treeLeaningRight.root.rightChild;
		}
		assertEquals(v, treeLeaningRight.findLCA(v.data, w.data));
		
		BinaryTree balancedAndLongTree = new BinaryTree();
		balancedAndLongTree.populateBalancedAndLongTree(balancedAndLongTree);
		Node v = treeLeaningRight.root;
		Node w = null;
		if(treeLeaningRight.root.leftChild!=null) {
			w = treeLeaningRight.root.leftChild;
		}
		else if(treeLeaningRight.root.rightChild!=null) {
			w = treeLeaningRight.root.rightChild;
		}
		assertEquals(v, treeLeaningRight.findLCA(v.data, w.data));
		
	}
	
	@Test
	public void testfindLCAWIsAncestor(BinaryTree tree) {
		Node w = tree.root;
		Node v = null;
		if(tree.root.leftChild!=null) {
			v = tree.root.leftChild;
		}
		else if(tree.root.rightChild!=null) {
			v = tree.root.rightChild;
		}
		assertEquals(v, tree.findLCA(v.data, w.data));
	}
	
	@Test
	public void testfindLCAVAndWEqual(BinaryTree tree) {
		Node v = tree.root.leftChild.leftChild;
		Node w = tree.root.leftChild.leftChild;
		assertEquals(v, tree.findLCA(v.data, w.data));
	}
	
//	@Test
//	public void testfindLCAVNotAValidNode(BinaryTree tree) {
//		Node root = new Node(1);
//		Node v = new Node(5);
//		Node w = new Node(8);
//		assertEquals(null, BinaryTree.findLCA(root, v, w));
//	}
//	
}
