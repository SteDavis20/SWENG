// @author: Stephen Davis

// adapted from Dhruv's work (from GeeksForGeeks).

// Java implementation to find lowest common ancestor of
// n1 and n2 using one traversal of binary graph
// It also handles cases even when n1 and n2 are not there in graph

public class DAG
{

	/**
	 *  @author Robert Sedgewick
	 *  @author Kevin Wayne
	 */

	private static final String NEWLINE = System.getProperty("line.separator");

	private final int V;           // number of vertices in this DAG
	private int E;                 // number of edges in this DAG
	private Bag<Integer>[] adj;    // adj[v] = adjacency list for vertex v
	//	    private int[] indegree;        // indegree[v] = indegree of vertex v

	// Root of the Binary graph (from previous implementation)
	Node root;
	static boolean v1 = false, v2 = false;					// used to check if nodes are in graph

	/**
	 * Initializes an empty DAG with V vertices.
	 *
	 * @param  V the number of vertices
	 * @throws IllegalArgumentException if {@code V < 0}
	 */
	public DAG(int V) {
		if (V < 0) throw new IllegalArgumentException("Number of vertices in a DAG must be non-negative");
		this.V = V;
		this.E = 0;
		//	        indegree = new int[V];
		adj = (Bag<Integer>[]) new Bag[V];
		for (int v = 0; v < V; v++) {
			adj[v] = new Bag<Integer>();
		}
		if(V>0) {
			root = new Node(0);
		}
	}

	/**
	 * Returns the number of vertices in this DAG.
	 *
	 * @return the number of vertices in this DAG
	 */
	public int V() {
		return V;
	}

	/**
	 * Returns the number of edges in this DAG.
	 *
	 * @return the number of edges in this DAG
	 */
	public int E() {
		return E;
	}

	/**
	 * Adds the directed edge v -> w to this DAG.
	 *
	 * @param  v the tail vertex
	 * @param  w the head vertex
	 * @throws IllegalArgumentException unless both {@code 0 <= v < V} and {@code 0 <= w < V}
	 */
	public void addEdge(int v, int w) {
		adj[v].add(w);
		//	        indegree[w]++;
		E++;
	}

	/**
	 * Returns the vertices adjacent from vertex {@code v} in this DAG.
	 *
	 * @param  v the vertex
	 * @return the vertices adjacent from vertex {@code v} in this DAG, as an iterable
	 * @throws IllegalArgumentException unless {@code 0 <= v < V}
	 */
	public Iterable<Integer> adj(int v) {
		return adj[v];
	}

	/**
	 * Returns a string representation of the graph.
	 *
	 * @return the number of vertices <em>V</em>, followed by the number of edges <em>E</em>,  
	 *         followed by the <em>V</em> adjacency lists
	 */
	public String toString() {
		StringBuilder s = new StringBuilder();
		s.append(V + " vertices, " + E + " edges " + NEWLINE);
		for (int v = 0; v < V; v++) {
			s.append(String.format("%d: ", v));
			for (int w : adj[v]) {
				s.append(String.format("%d ", w));
			}
			s.append(NEWLINE);
		}
		return s.toString();
	}



	// @author: Stephen Davis
	public void populateLongNarrowGraph(DAG graph) {
		for(int i=0; i<V; i++) {
			graph.addEdge(i, i+1);
		}
	}


	
	public static void main(String[] args) {

	}
	
}